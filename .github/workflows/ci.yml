---
name: CI

on:
  push:
    branches:
      - main
      - stable/*
      - release-*
  pull_request: {}
  merge_group: {}
  workflow_dispatch: {}

# Limit workflow to 1 concurrent run per ref (branch): new commit -> old runs are canceled to save costs
# Exception for main branch: complete builds for every commit needed for confidenence
# Exception for deploy jobs that have to wait for each other to avoid overwriting
concurrency:
  cancel-in-progress: true
  group: ${{ format('{0}-{1}', github.workflow, github.ref == 'refs/heads/main' && github.sha || github.ref) }}

defaults:
  run:
    # use bash shell by default to ensure pipefail behavior is the default
    # see https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference
    shell: bash

env:
  DOCKER_PLATFORMS: "linux/amd64,linux/arm64"

jobs:
  detect-changes:
    outputs:
      actionlint: ${{ steps.filter.outputs.actionlint }}
      java-code-changes: ${{ steps.filter.outputs.java-code-changes }}
      camunda-docker-tests: ${{ steps.filter.outputs.camunda-docker-tests}}
      identity-frontend-tests: ${{ steps.filter.outputs.identity-frontend-tests }}
      frontend-changes: ${{ steps.filter.outputs.frontend-changes }}
      zeebe-changes: ${{ steps.filter.outputs.zeebe-changes }}
      optimize-frontend-changes: ${{ steps.filter.outputs.optimize-frontend-changes }}
      optimize-backend-changes: ${{ steps.filter.outputs.optimize-backend-changes }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      # Detect changes against the base branch
      - name: Detect changes
        uses: ./.github/actions/paths-filter
        id: filter

  actionlint:
    if: needs.detect-changes.outputs.actionlint == 'true'
    needs: [detect-changes]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      # renovate: datasource=github-releases depName=rhysd/actionlint
      ACTIONLINT_VERSION: '1.7.1'
    steps:
      - uses: actions/checkout@v4
      - run: echo "::add-matcher::.github/actionlint-matcher.json"
      - run: |
          bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash) $ACTIONLINT_VERSION
          ./actionlint -shellcheck '' -ignore 'property "vault_.+" is not defined in object type' -ignore 'object type "{}" cannot be filtered by object filtering `.*` since it has no object element'
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}

  java-checks:
    if: needs.detect-changes.outputs.java-code-changes == 'true'
    needs: [detect-changes]
    name: Java checks
    timeout-minutes: 15
    runs-on: [ self-hosted, linux, amd64, "16" ]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-zeebe
        with:
          go: false
          maven-cache-key-modifier: java-checks
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
      - run: ./mvnw -T1C -B -D skipTests -D skipOptimize -P !autoFormat,checkFormat,spotbugs,skipFrontendBuild verify
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}

  build-platform-frontend:
    if: needs.detect-changes.outputs.frontend-changes == 'true'
    needs: [detect-changes]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-zeebe
        with:
          go: true
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
      - uses: ./.github/actions/build-frontend
        id: build-operate-fe
        with:
          directory: ./operate/client
      - uses: ./.github/actions/build-frontend
        id: build-tasklist-fe
        with:
          directory: ./tasklist/client
      - uses: ./.github/actions/build-frontend
        id: build-identity-fe
        with:
          directory: ./identity/client
      - uses: ./.github/actions/build-frontend
        id: build-optimize-fe
        with:
          directory: ./optimize/client
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}

  java-unit-tests:
    if: needs.detect-changes.outputs.java-code-changes == 'true'
    needs: [detect-changes]
    runs-on: [ self-hosted, linux, amd64, "16" ]
    timeout-minutes: 30
    outputs:
      flakyTests: ${{ steps.analyze-test-run.outputs.flakyTests }}
    steps:
      - uses: actions/checkout@v4
      - name: Install and allow strace tests
        run: |
          sudo apt-get -qq update && sudo apt-get install -y strace
          sudo sysctl -w kernel.yama.ptrace_scope=0
      - uses: ./.github/actions/setup-zeebe
        with:
          go: false
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
      - uses: ./.github/actions/build-zeebe
        with:
          go: false
          maven-extra-args: -T1C -PskipFrontendBuild -D skipOptimize
      - name: Create build output log file
        run: echo "BUILD_OUTPUT_FILE_PATH=$(mktemp)" >> $GITHUB_ENV
      - name: Maven Test Build
        # we use the verify goal here as flaky test extraction is bound to the post-integration-test
        # phase of Maven https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#default-lifecycle
        run: >
          ./mvnw -T2 -B --no-snapshot-updates
          -D skipITs -D skipQaBuild=true -D skipChecks -D surefire.rerunFailingTestsCount=3
          -D junitThreadCount=16
          -D skipOptimize
          -P skip-random-tests,parallel-tests,extract-flaky-tests,skipFrontendBuild
          verify
          | tee "${BUILD_OUTPUT_FILE_PATH}"
      - name: Analyze Test Runs
        id: analyze-test-run
        if: always()
        uses: ./.github/actions/analyze-test-runs
        with:
          buildOutputFilePath: ${{ env.BUILD_OUTPUT_FILE_PATH }}
      - name: Upload test artifacts
        uses: ./.github/actions/collect-test-artifacts
        if: ${{ failure() || cancelled() }}
        with:
          name: "unit tests"
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          user_reason: ${{ (steps.analyze-test-run.outputs.flakyTests != '') && 'flaky-tests' || '' }}
          user_description: ${{ steps.analyze-test-run.outputs.flakyTests }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}

  integration-tests:
    if: needs.detect-changes.outputs.java-code-changes == 'true'
    name: "[IT] ${{ matrix.name }}"
    needs: [ detect-changes ]
    timeout-minutes: 20
    outputs:
      flakyTests: ${{ steps.analyze-test-run.outputs.flakyTests }}
    runs-on: [ self-hosted, linux, amd64, "16" ]
    strategy:
      fail-fast: false
      matrix:
        group: [ root, modules, qa-integration, qa-update ]
        include:
          - group: root
            name: "Root Integration Tests"
            maven-modules: "'qa/integration-tests'"
            maven-build-threads: 2
            maven-test-fork-count: 7
          - group: modules
            name: "Zeebe Module Integration Tests"
            maven-modules: "'!qa/integration-tests,!qa/update-tests' -f zeebe"
            maven-build-threads: 2
            maven-test-fork-count: 7
          - group: qa-integration
            name: "Zeebe QA - Integration Tests"
            maven-modules: "zeebe/qa/integration-tests"
            maven-build-threads: 1
            maven-test-fork-count: 10
          - group: qa-update
            name: "Zeebe QA - Update Tests"
            maven-modules: "zeebe/qa/update-tests"
            maven-build-threads: 1
            maven-test-fork-count: 10
    env:
      ZEEBE_TEST_DOCKER_IMAGE: localhost:5000/camunda/zeebe:current-test
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-zeebe
        with:
          maven-cache-key-modifier: it-${{ matrix.group }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
      - uses: ./.github/actions/build-zeebe
        id: build-zeebe
        with:
          maven-extra-args: -T1C -PskipFrontendBuild -D skipOptimize
      - uses: ./.github/actions/build-platform-docker
        with:
          repository: localhost:5000/camunda/zeebe
          version: current-test
          push: true
          distball: ${{ steps.build-zeebe.outputs.distball }}
      - name: Create build output log file
        run: echo "BUILD_OUTPUT_FILE_PATH=$(mktemp)" >> $GITHUB_ENV
      - name: Maven Test Build
        run: >
          ./mvnw -B -T ${{ matrix.maven-build-threads }} --no-snapshot-updates
          -D forkCount=${{ matrix.maven-test-fork-count }}
          -D maven.javadoc.skip=true
          -D skipUTs -D skipChecks -D skipOptimize
          -D failsafe.rerunFailingTestsCount=3 -D flaky.test.reportDir=failsafe-reports
          -P parallel-tests,extract-flaky-tests,skipFrontendBuild
          -pl ${{ matrix.maven-modules }}
          verify
          | tee "${BUILD_OUTPUT_FILE_PATH}"
      - name: Analyze Test Runs
        id: analyze-test-run
        if: always()
        uses: ./.github/actions/analyze-test-runs
        with:
          buildOutputFilePath: ${{ env.BUILD_OUTPUT_FILE_PATH }}
      - name: Upload test artifacts
        uses: ./.github/actions/collect-test-artifacts
        if: ${{ failure() || cancelled() }}
        with:
          name: "[IT] ${{ matrix.name }}"
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          job_name: "integration-tests/${{ matrix.group }}"
          build_status: ${{ job.status }}
          user_reason: ${{ (steps.analyze-test-run.outputs.flakyTests != '') && 'flaky-tests' || '' }}
          user_description: ${{ steps.analyze-test-run.outputs.flakyTests }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}

  docker-checks:
    if: needs.detect-changes.outputs.camunda-docker-tests == 'true'
    name: Camunda docker tests
    needs: [ detect-changes ]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    services:
      # local registry is used as this job needs to push as it builds multi-platform images
      registry:
        image: registry:2
        ports:
          - 5000:5000
    env:
      LOCAL_DOCKER_IMAGE: localhost:5000/camunda/camunda
      TEST_ELASTICSEARCH_IMAGE: docker.elastic.co/elasticsearch/elasticsearch:8.14.1
    steps:
      - uses: actions/checkout@v4
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          config: ./.hadolint.yaml
          dockerfile: ./camunda.Dockerfile
          format: sarif
          output-file: ./hadolint.sarif
          no-color: true
          verbose: true
      - name: Upload Hadolint Results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./hadolint.sarif
      - uses: ./.github/actions/setup-zeebe
        with:
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
          docker-secret-path: secret/data/products/camunda/ci/github-actions
      - uses: ./.github/actions/build-zeebe
        id: build-camunda
        with:
          maven-extra-args: -PskipFrontendBuild -D skipOptimize
          go: false
      - uses: ./.github/actions/build-platform-docker
        id: build-camunda-docker
        with:
          # we use a local registry for pushing
          repository: ${{ env.LOCAL_DOCKER_IMAGE }}
          distball: ${{ steps.build-camunda.outputs.distball }}
          platforms: ${{ env.DOCKER_PLATFORMS }}
          dockerfile: camunda.Dockerfile
          # push is needed for multi-arch images as buildkit does not support loading them locally
          push: true

      # We need to free up some space to let the step after this block succeed.
      # With this cleanup, at the time of measuring, we go from a 100% disk usage (73/74 GB) to a
      # 94% (68/73 GB), on the runner ubuntu-latest. This allows the workflow to go through.
      - name: Cleanup docker images
        run: docker system prune -af

      - name: Verify Docker image
        uses: ./.github/actions/verify-platform-docker
        with:
          imageName: ${{ env.LOCAL_DOCKER_IMAGE }}
          date: ${{ steps.build-camunda-docker.outputs.date }}
          revision: ${{ github.sha }}
          version: ${{ steps.build-camunda-docker.outputs.version }}
          platforms: ${{ env.DOCKER_PLATFORMS }}
          goldenfile: camunda-docker-labels.golden.json
      - name: Run Docker tests
        run: |
          ./mvnw -f dist --no-snapshot-updates -DskipChecks -DskipOptimize -Dtest=CamundaDockerIT -Dsurefire.rerunFailingTestsCount=3 \
          -Dcamunda.docker.test.enabled=true \
          -Dcamunda.docker.test.image="${{ env.LOCAL_DOCKER_IMAGE }}:${{ steps.build-camunda-docker.outputs.version }}" \
          -Dcamunda.docker.test.elasticsearch.image="${{ env.TEST_ELASTICSEARCH_IMAGE }}" \
          test
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}

  identity-frontend-tests:
    if: needs.detect-changes.outputs.identity-frontend-tests == 'true'
    needs: [detect-changes]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    defaults:
      run:
        working-directory: identity/client
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: identity/client/yarn.lock
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Check formatting
        run: yarn test:format
      - name: Lint code
        run: yarn test:lint
      - name: Unit & Integration tests
        run: yarn test:unit
      - name: Check licenses
        run: yarn test:licenses
      - name: Build frontend
        run: yarn build
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}

  zeebe-ci:
    if: needs.detect-changes.outputs.zeebe-changes == 'true'
    needs: [detect-changes]
    uses: ./.github/workflows/zeebe-ci.yml

  optimize-frontend-unit-tests:
    if: needs.detect-changes.outputs.optimize-frontend-changes == 'true'
    needs: [detect-changes]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: optimize/client
    env:
      LIMITS_CPU: 4
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: "Parse pom.xml for versions"
        id: "pom_info"
        uses: YunaBraska/java-info-action@main
      - name: Set Node.js
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4
        with:
          node-version: ${{ steps.pom_info.outputs.x_version_node }}
          cache: yarn
          cache-dependency-path: optimize/client/yarn.lock
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Unit tests
        run: yarn test:ci
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4
        with:
          name: unit-tests-frontend-junit
          path: |
            **/jest-test-results.xml
          retention-days: 7
          if-no-files-found: ignore
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}

  optimize-backend-unit-tests:
    if: needs.detect-changes.outputs.optimize-backend-changes == 'true'
    needs: [detect-changes]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      LIMITS_CPU: 4
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
      - name: Setup Maven
        uses: ./.github/actions/setup-maven
        with:
          secrets: ${{ toJSON(secrets) }}
      - name: Test
        uses: ./.github/actions/run-maven
        with:
          parameters: -f optimize/pom.xml test -Dskip.fe.build -Dskip.docker
          threads: 4C
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4
        with:
          name: unit-tests-backend-junit
          path: |
            **/surefire-reports/**/*.xml
          retention-days: 7
          if-no-files-found: ignore
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}

  check-results:
    # Used by the merge queue to check all tests, including the unit test matrix.
    # New test jobs must be added to the `needs` lists!
    # This name is hard-coded in the branch rules; remember to update that if this name changes
    if: always()
    runs-on: ubuntu-latest
    outputs:
      flakyUnitTests: ${{ needs.java-unit-tests.outputs.flakyTests }}
      flakyITs: ${{ needs.integration-tests.outputs.flakyTests }}
    needs:
      - actionlint
      - java-unit-tests
      - docker-checks
      - identity-frontend-tests
      - integration-tests
      - java-checks
      - build-platform-frontend
      - zeebe-ci
      - optimize-frontend-unit-tests
      - optimize-backend-unit-tests
    steps:
      - uses: actions/checkout@v4
      - name: Check for aborted jobs
        continue-on-error: true
        uses: ./.github/actions/observe-aborted-jobs
        with:
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
      - run: exit ${{ ((contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'failure')) && 1) || 0 }}

  notify-if-failed:
    name: Send slack notification on build failure
    runs-on: ubuntu-latest
    needs: [ check-results ]
    if: failure() && github.repository == 'camunda/camunda' && github.ref == 'refs/heads/main'
    steps:
      - id: slack-notify
        name: Send slack notification
        uses: slackapi/slack-github-action@v1.26.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": ":alarm: Build on `main` failed! :alarm:\n${{ github.event.head_commit.url }}",
             	"blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ":alarm: Build on `main` failed! :alarm:"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Please check the related commit: ${{ github.event.head_commit.url }}\n \\cc @zeebe-medic"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Detected flaky unit tests:* \n ${{ env.FLAKY_UNIT_TESTS }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Detected flaky integration tests:* \n ${{ env.FLAKY_ITS }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          FLAKY_UNIT_TESTS: ${{needs.check-results.outputs.flakyUnitTests}}
          FLAKY_ITS: ${{needs.check-results.outputs.flakyITs}}

  deploy-snapshots:
    name: Deploy snapshot artifacts
    needs: [ check-results ]
    runs-on: ubuntu-latest
    if: github.repository == 'camunda/camunda' && github.ref == 'refs/heads/main'
    concurrency:
      group: deploy-maven-snapshot
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v3.0.0
        with:
          url: ${{ secrets.VAULT_ADDR }}
          method: approle
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
          secrets: |
            secret/data/products/zeebe/ci/zeebe ARTIFACTS_USR;
            secret/data/products/zeebe/ci/zeebe ARTIFACTS_PSW;
      - uses: actions/setup-java@v4.2.2
        with:
          distribution: 'temurin'
          java-version: '21'
      # Use CI Nexus as co-located pull-through cache for Maven artifacts via ~/.m2/settings.xml
      - name: 'Create settings.xml'
        uses: s4u/maven-settings-action@v3.0.0
        with:
          githubServer: false
          servers: |
            [{
              "id": "camunda-nexus",
              "username": "${{ steps.secrets.outputs.ARTIFACTS_USR }}",
              "password": "${{ steps.secrets.outputs.ARTIFACTS_PSW }}"
            }]
          mirrors: '[{"url": "https://repository.nexus.camunda.cloud/content/groups/internal/", "id": "camunda-nexus", "mirrorOf": "zeebe,zeebe-snapshots", "name": "camunda Nexus"}]'
      # compile and generate-sources to ensure that the Javadoc can be properly generated; compile is
      # necessary when using annotation preprocessors for code generation, as otherwise the symbols are
      # not resolve-able by the Javadoc generator
      - run: ./mvnw -B -D skipTests -D skipChecks compile generate-sources source:jar javadoc:jar deploy
        env:
          MAVEN_USERNAME: ${{ steps.secrets.outputs.ARTIFACTS_USR }}
          MAVEN_PASSWORD: ${{ steps.secrets.outputs.ARTIFACTS_PSW }}
      - name: Observe build status
        if: always()
        continue-on-error: true
        uses: ./.github/actions/observe-build-status
        with:
          build_status: ${{ job.status }}
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}

  deploy-camunda-docker-snapshot:
    name: Deploy snapshot Camunda Docker image
    needs: [ docker-checks, check-results ]
    runs-on: ubuntu-latest
    if: github.repository == 'camunda/camunda' && github.ref == 'refs/heads/main'
    concurrency:
      group: deploy-camunda-docker-snapshot
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-zeebe
        with:
          secret_vault_secretId: ${{ secrets.VAULT_SECRET_ID }}
          secret_vault_address: ${{ secrets.VAULT_ADDR }}
          secret_vault_roleId: ${{ secrets.VAULT_ROLE_ID }}
          docker-token: REGISTRY_HUB_DOCKER_COM_PSW
          docker-secret-path: secret/data/products/camunda/ci/github-actions
      - uses: ./.github/actions/build-frontend
        id: build-operate-fe
        with:
          directory: ./operate/client
      - uses: ./.github/actions/build-frontend
        id: build-tasklist-fe
        with:
          directory: ./tasklist/client
      - uses: ./.github/actions/build-frontend
        id: build-identity-fe
        with:
          directory: ./identity/client
      - uses: ./.github/actions/build-zeebe
        id: build-camunda
        with:
          maven-extra-args: -PskipFrontendBuild
          go: false
      - uses: ./.github/actions/build-platform-docker
        id: build-camunda-docker
        with:
          repository: camunda/camunda
          version: SNAPSHOT
          distball: ${{ steps.build-camunda.outputs.distball }}
          platforms: ${{ env.DOCKER_PLATFORMS }}
          dockerfile: camunda.Dockerfile
          push: true
